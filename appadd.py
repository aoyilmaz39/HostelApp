# -*- coding: utf-8 -*-
#!/usr/bin/python

# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time

import MySQLdb.constants.FIELD_TYPE
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from design import Ui_Form
from bilgigiris import Ui_Kayitpenceresi
from emin import Ui_MainWindow
from menu_ekle import Ui_Menu_ekle
from kisibilgi import Ui_KisiBilgi
from gecmis import Ui_Gecmis
from tarih_uzat import Ui_tarih_uzat
from Database import *
import sys
from  odafiyat import Ui_odafiyat_window
from datetime import date
db.create_all()

class Motel(QWidget):

    def __init__(self):
        super().__init__()
        self.ui=Ui_Form()
        self.ui.setupUi(self)

        self.setWindowIcon(QIcon(":/icon/home_icon.png"))
        self.ui.odagiris_button.clicked.connect(self.odagiris)
        self.ui.cikisbuton.clicked.connect(lambda:QApplication.quit())
        self.ui.odacikis_button.clicked.connect(self.odacikis)
        self.ui.kisi_button.clicked.connect(self.kisibilgi)
        self.ui.menuekle_button.clicked.connect(self.menueklemenusu)
        self.ui.menucikar_button.clicked.connect(self.menucikar)
        self.ui.urun_listesi_QlistWidget.clicked.connect(self.urunfiyatgoster)
        self.ui.urun_ekle_button.clicked.connect(self.urunekle)
        self.ui.urun_cikar_button.clicked.connect(self.uruncikar)
        self.ui.gecmis_button.clicked.connect(self.gecmis)
        self.ui.zaman_uzat_pushButton.clicked.connect(self.tarihuzat)
        self.ui.odafiyat_pushButton.clicked.connect(self.odafiyatpencere)

        self.ui.arama_lineEdit.textChanged.connect(self.arama)

        self.odalariTanimla(self.ui)
        self.menuliste(self.ui)
        self.hesaplistele(self.ui)

    def odalariTanimla(self,pencere):
        for i in range(1,15,1):
            eval(f"self.ui.no{i}.clicked.connect(self.oda)")
        for i in range(1,15):
            bilgi=eval(f"db.session.query(Oda{i}).get(1)")
            if bilgi is not None:
                b=str(bilgi.ctarih).split(".")
            if bilgi is None:
                iconbos = QIcon()
                iconbos.addPixmap(QPixmap(":/icon/bos.png"))
                eval(f"self.ui.no{i}.setIcon(iconbos)")
            elif bilgi.ctarih == str(date.today().strftime("%d,%m,%Y")):
                iconsongun = QIcon()
                iconsongun.addPixmap(QPixmap(":/icon/songun.png"))
                eval(f"self.ui.no{i}.setIcon(iconsongun)")
            elif int(b[2]) < int(date.today().strftime("%Y")) or int(b[1]) < int(date.today().strftime("%m")) or int(int(b[1])) >= int(date.today().strftime("%m")) and int(b[1]) >= int(date.today().strftime("%d")) > int(b[0]) :
                iconbitti = QIcon()
                iconbitti.addPixmap(QPixmap(":/icon/bitti.png"))
                eval(f"self.ui.no{i}.setIcon(iconbitti)")
            else:
                icondolu = QIcon()
                icondolu.addPixmap(QPixmap(":/icon/dolu.png"))
                eval(f"self.ui.no{i}.setIcon(icondolu)")
    def menuliste(self,pencere):
        urunler=db.session.query(Satis).all()
        if urunler is None:
            self.ui.urun_fiyat_label.setText("Ürün yok.")
        for i in urunler:
            self.ui.urun_listesi_QlistWidget.addItem(i.urun)
    def hesaplistele(self,pencere):
        if self.ui.ekran_label.text()[-4:] == "boş.":
            self.ui.urun_fiyat_label.setText("Oda boş.")
        elif self.ui.ekran_label.text()[-4:] == "":
            self.ui.urun_fiyat_label.setText("Oda seçiniz.")
        else:
            odabilgi = eval(f"Oda{odano}.query.get(1)")
            cik = odabilgi.ctarih.split(".")
            gir = odabilgi.gtarih.split(",")
            kg=(date(int(cik[2]),int(cik[1]),int(cik[0]))-date(int(gir[2]),int(gir[1]),int(gir[0]))).days
            masraf = odabilgi.odamasraf
            mas = masraf.split("\n")
            urunler = Satis.query.all()
            mn=mas[0]+" TL *({} Gün)".format(kg)
            toplammasraf = [mn]
            for b in urunler:
                nn=masraf.split(" ")
                k=0
                for q in nn:
                    if q == b.urun:
                        k+=1
                if k == 0:
                    pass
                else:
                    artik = b.urun + " : " + str(b.fiyati) + " TL  ({} adet)".format(k)
                    toplammasraf.append(artik)
            cikti=""
            for i in range(len(toplammasraf)):
                cikti +=" \n "+str(i)+". "+toplammasraf[i]
            self.ui.ekran_label_2.setText(str(cikti))
            self.ui.hesap_gosterge.display(str(odabilgi.thesap))

    def odafiyatpencere(self):
        if self.ui.ekran_label.text() == "" or self.ui.ekran_label.text().endswith("seçiniz."):
            return self.ui.ekran_label.setText("Lütfen oda seçiniz.")
        else:
            self.odapencere=QMainWindow()
            self.ofw=Ui_odafiyat_window()
            self.ofw.setupUi(self.odapencere)
            self.odapencere.show()
            self.odapencere.setWindowIcon(QIcon(":/icon/home_icon.png"))

            self.ofw.Odafiyat_uyari_label.setText("{} numaralı odanın fiyatını belirleyiniz.".format(odano))
            self.ofw.Odafiyat_cik_button.clicked.connect(self.odapencere.close)
            self.ofw.odafiyat_degis_pushButton.clicked.connect(self.odafiyat)
    def odafiyat(self):
        try:
            oda = "Oda{}".format(odano)
            odalik = Odafiyat.query.filter_by(odalar=oda).first()
            odafiyat = self.ofw.odafiyat_lineEdit.text()
            odafiyat = int(odafiyat)
            if odalik is None:
                ek=eval(f"Odafiyat(odalar=oda,fiyat=odafiyat)")
                db.session.add(ek)
            else:
                odalik.fiyati=odafiyat
            db.session.commit()

            self.ui.ekran_label.setText("{} numaralı odanın fiyatı {}".format(odano,odafiyat))
            self.odapencere.close()

        except:
            self.ofw.Odafiyat_uyari_label.setText("Lütfen sadece rakam giriniz.")

    def urunfiyatgoster(self):
        item = self.ui.urun_listesi_QlistWidget.currentItem()
        urun = Satis.query.filter_by(urun=str(item.text())).first()
        self.ui.urun_fiyat_label.setText(str(urun.fiyati)+"  TL")
    def urunekle(self):
        if self.ui.ekran_label.text() == "" :
            return self.ui.urun_fiyat_label.setText("Lütfen oda seçiniz.")
        elif self.ui.ekran_label.text().endswith("boş."):
            return self.ui.urun_fiyat_label.setText("Dolu bir oda seçiniz.")
        elif self.ui.urun_listesi_QlistWidget.currentItem() is None:
            self.ui.urun_fiyat_label.setText("Bir ürün seçiniz.")
        elif self.ui.urun_fiyat_label.text() == "Bir ürün seçiniz.":
            self.ui.urun_fiyat_label.setText("Bir ürün seçiniz.")
        else:
            item = self.ui.urun_listesi_QlistWidget.currentItem()
            urunisim = item.text()
            urunfiyat = self.ui.urun_fiyat_label.text()
            urunfiyat = urunfiyat.rstrip("  TL")
            odabilgi = eval(f"Oda{odano}.query.get(1)")

            masraf = int(urunfiyat)+odabilgi.thesap
            odabilgi.thesap = masraf

            odabilgi.odamasraf = odabilgi.odamasraf +urunisim + " : " + urunfiyat + " \n "
            db.session.commit()
            self.hesaplistele(self)

    def tarihuzat(self):
        if self.ui.ekran_label.text() == "" or self.ui.ekran_label.text().endswith("boş.") or self.ui.ekran_label.text().endswith("seçiniz."):
            self.ui.ekran_label.setText("Lütfen dolu bir oda seçiniz.")
        else:
            self.penceretarih=QMainWindow()
            self.tarihui=Ui_tarih_uzat()
            self.tarihui.setupUi(self.penceretarih)
            self.penceretarih.show()
            self.penceretarih.setWindowIcon(QIcon(":/icon/home_icon.png"))

            self.tarihui.Oda_cikis_label.setText("{} numaralı oda için çıkış tarihi belirleyiniz.".format(odano))
            self.tarihui.degistir_pushButton.clicked.connect(self.eksure)
            self.tarihui.tarih_uzat_cikis_pushButton.clicked.connect(self.penceretarih.close)
    def eksure(self):
        user=eval(f"Oda{odano}.query.get(1)")
        yenitarih=self.tarihui.new_date_edit.text().split(".")
        gtarih=str(date.today().strftime("%d,%m,%Y")).split(",")

        if int(yenitarih[2]) - int(gtarih[2]) < 0 or int(yenitarih[2]) == int(gtarih[2]) and int(yenitarih[1]) < int(gtarih[1]):
            return self.tarihui.degistirildi_label.setText("Çıkış tarihiniz geçmiş yada uzak bir zaman olamaz.")
        elif int(yenitarih[1]) == int(gtarih[1]) and int(yenitarih[0]) <= int(gtarih[0]):
            return self.tarihui.degistirildi_label.setText("Çıkış tarihiniz geçmiş yada uzak bir zaman olamaz.")
        else:
            user.ctarih = self.tarihui.new_date_edit.text()
            db.session.commit()
            return self.tarihui.degistirildi_label.setText("Çıkış tarihi başarıyla değiştirildi.")
            self.hesaplistele(self)

    def uruncikar(self):
        item = self.ui.urun_listesi_QlistWidget.currentItem()
        if self.ui.ekran_label.text() == "" :
            return self.ui.urun_fiyat_label.setText("Lütfen oda seçiniz.")
        elif self.ui.ekran_label.text().endswith("boş."):
            return self.ui.urun_fiyat_label.setText("Dolu bir oda seçiniz.")

        odabilgi=eval(f"Oda{odano}.query.get(1)")
        fiyat = self.ui.urun_fiyat_label.text()
        if item is None:
            self.ui.urun_fiyat_label.setText("Lütfen ürün seçiniz.")
        elif self.ui.ekran_label.text()[-4:] == "":
            self.ui.urun_fiyat_label.setText("Lütfen Oda seçiniz.")
        else:
            silinecek = item.text()+ " : " + fiyat[:-3].strip()
            liste = odabilgi.odamasraf
            liste=liste.split("\n")
            son = ""
            if silinecek in liste:
                pass
            else:
                self.ui.urun_fiyat_label.setText("Bu ürün bulunmamakta. ")
                return
            for i in liste:
                if i == silinecek.strip():
                    liste.remove(i)
                    for i in liste:
                        son += i + "\n"
                    break
                else:
                    pass
            son=son[:-1]
            odabilgi = eval(f"Oda{odano}.query.get(1)")
            odabilgi.odamasraf = son
            a=odabilgi.thesap - int(fiyat[:-3])
            odabilgi.thesap = a
            db.session.commit()
            self.hesaplistele(self)

    def odagiris(self):
            oda = "Oda{}".format(odano)
            odalik = Odafiyat.query.filter_by(odalar=oda).first()
            if self.ui.ekran_label.text() == "":
                self.ui.ekran_label.setText("Lütfen Bir Oda seçiniz.")
            elif odalik is None:
                    self.ui.ekran_label.setText("Lütfen oda fiyatı belirleyiniz.")
            else:
                self.pencerekayit = QMainWindow()
                self.ui2 = Ui_Kayitpenceresi()
                self.ui2.setupUi(self.pencerekayit)
                self.pencerekayit.show()
                self.ui.ekran_label.setText("")
                self.pencerekayit.setWindowIcon(QIcon(":/icon/home_icon.png"))

                self.ui2.kayitpencere_cikis_button.clicked.connect(self.pencerekayit.close)
                self.ui2.bilgikayit_button.clicked.connect(self.kayitbilgi)
    def kayitbilgi(self):
        try:
            ad = self.ui2.isimgir_lineEdit.text().strip().title()
            tc = self.ui2.tcgir_lineEdit.text().strip()
            tel = self.ui2.telgir_lineEdit.text().strip()
            mail = self.ui2.mailgir_lineEdit.text().strip()
            dtarih = self.ui2.dogun_dateEdit.text()
            gtarih = date.today().strftime("%d,%m,%Y")
            ctarih = self.ui2.cikis_tarihi_date_edit.text()

            if self.ui2.isimgir_lineEdit.text() == "":
                return self.ui2.uyari_label.setText("Lütfen İsim giriniz.")
            elif len(ad.split(" ")) == 1:
                return self.ui2.uyari_label.setText("İsim soyiyim en az 2 kelime olmalı.")
            if self.ui2.tcgir_lineEdit.text() == "":
                return self.ui2.uyari_label.setText("Lütfen Tc kimlik numarası giriniz.")
            elif len(str(tc)) !=11:
                return self.ui2.uyari_label.setText("Lütfen Geçerli bir Tc kimlik numarası giriniz.")
            if self.ui2.telgir_lineEdit.text() == "":
                return self.ui2.uyari_label.setText("Lütfen telefon numarası giriniz.")
            elif len(str(tel))!=10:
                return self.ui2.uyari_label.setText("Lütfen geçerli bir telefon numarası giriniz.")
            if self.ui2.cikis_tarihi_date_edit.text() == "1.01.2000":
                return self.ui2.uyari_label.setText("Lütfen çıkış tarihini giriniz.")

            ggtarih = date.today().strftime("%d,%m,%Y").split(",")
            cc = self.ui2.cikis_tarihi_date_edit.text().split(".")
            if (int(cc[2]) < int(ggtarih[2])) or (int(cc[2]) >= int(ggtarih[2]) and int(cc[1]) < int(ggtarih[1])) or (int(cc[1]) == int(ggtarih[1]) and int(cc[0]) <= int(ggtarih[0])):
                return self.ui2.uyari_label.setText("Çıkış tarihiniz geçmiş yada uzak bir zaman olamaz.")

            if self.ui2.bay_radioButton_2.isChecked():
                cinsiyet = "Bay"
            elif self.ui2.bayan_radioButton.isChecked():
                cinsiyet = "Bayan"
            else:
                return self.ui2.uyari_label.setText("Lütfen Cinsiyet seçiniz.")
            musteri = eval(f"Oda{odano}(isimsoyisim=ad, tc=tc, odanumarasi=odano, telefon=tel, mail=mail, dtarih=dtarih,thesap=0,gtarih=gtarih,ctarih=ctarih,cinsiyet=cinsiyet,bitti=False)")
            db.session.add(musteri)
            db.session.commit()
            Odalarbilgi = eval(f"Oda{odano}.query.filter_by(odanumarasi=odano).all()")

            self.ui2.isimgir_lineEdit.clear()
            self.ui2.tcgir_lineEdit.clear()
            self.ui2.telgir_lineEdit.clear()
            self.ui2.mailgir_lineEdit.clear()
            self.ui2.dogun_dateEdit.clear()

            for i in Odalarbilgi:
                self.ui2.girilenler_label.setFont(QFont("Times", weight=QFont.Bold))
                self.ui2.girilenler_label.setText(str(i.kisi)+". "+str(i.isimsoyisim))
            hesap = eval(f"Oda{odano}.query.get(1)")
            for i in Odalarbilgi:
                if i.kisi == 1:
                    ad="Oda{}".format(odano)
                    oda=Odafiyat.query.filter_by(odalar=ad).first()
                    cik=ctarih.split(".")
                    kg=(date(int(cik[2]),int(cik[1]),int(cik[0]))-date(date.today().year,date.today().month,date.today().day)).days
                    hesap.thesap=oda.fiyat*kg
                    hesap.odamasraf="Oda ücreti : "+str(oda.fiyat)+" \n "
                    db.session.commit()
                    self.odalariTanimla(self.ui)
            db.session.commit()

            n = Odafiyat.query.filter_by(odalar='kisi').first()
            if n is None:
                ek = Odafiyat(odalar="kisi", fiyat=1)
                db.session.add(ek)
                db.session.commit()
            else:
                n.fiyat += 1
                db.session.commit()

            self.odalariTanimla(self.ui)



        except:
            self.ui2.uyari_label.setText("Başkalarının bilgilerini giremezsiniz.")

    def oda(self):
        global odano
        sender = self.sender()
        odano = sender.text()[3:]
        odano = int(odano)
        Odalarbilgi=eval(f"Oda{odano}.query.filter_by(odanumarasi=odano).all()")
        if Odalarbilgi ==[]:
            self.ui.ekran_label.setText("{}. Numaralı oda boş.".format(odano))
            self.ui.hesap_gosterge.display("0")
            oda = "Oda{}".format(odano)
            odalik = Odafiyat.query.filter_by(odalar=oda).first()
            if odalik is None:
                self.ui.ekran_label_2.setText("Oda fiyatı belirlenmemiş.")
            else:
                k=Odafiyat.query.filter_by(odalar="Oda{}".format(odano)).first()
                self.ui.ekran_label_2.setText("Gecelik oda ücreti {} TL.".format(str(k.fiyat)))
        else:
            k=""
            Odalarbilgi.reverse()
            for i in Odalarbilgi:
                    k=str(i.kisi)+". "+str(i.isimsoyisim)+" \n "+k
                    self.ui.ekran_label.setText(k)
            hesap = eval(f"Oda{odano}.query.get(1)")
            self.ui.hesap_gosterge.display(str(hesap.thesap))
            self.hesaplistele(self)

    def menueklemenusu(self):
        self.penceremenu = QMainWindow()
        self.menupencere = Ui_Menu_ekle()
        self.menupencere.setupUi(self.penceremenu)
        self.penceremenu.show()
        self.penceremenu.setWindowIcon(QIcon(":/icon/home_icon.png"))

        self.menupencere.cik_pushButton.clicked.connect(self.penceremenu.close)
        self.menupencere.ekle_urun_pushButton.clicked.connect(self.menuekle)
    def menuekle(self):
        try:
            urunismi=self.menupencere.urun_isim_lineEdit.text().strip().capitalize()
            urunfiyat=self.menupencere.urun_fiyat_lineEdit.text()
            if urunismi == "":
                return self.menupencere.bildiri_label.setText("Lütfen ürün giriniz.")
            elif urunfiyat == "":
                return self.menupencere.bildiri_label.setText("Lütfen ürün fiyatı giriniz.")
            urunfiyat=int(urunfiyat)
            mal=Satis(urun=urunismi,fiyati=urunfiyat)
            db.session.add(mal)
            db.session.commit()
        except:
            return self.menupencere.bildiri_label.setText("Lütfen bilgileri kontrol ediniz.")

        self.menupencere.urun_isim_lineEdit.clear()
        self.menupencere.urun_fiyat_lineEdit.clear()
        self.menupencere.bildiri_label.setText("Ürününüz Başarıyla Eklenmiştir.")
        self.ui.urun_listesi_QlistWidget.clear()
        self.menuliste(self.ui)
    def menucikar(self):
        curun=self.ui.urun_listesi_QlistWidget.takeItem(self.ui.urun_listesi_QlistWidget.currentRow())
        if curun is None:
            self.ui.urun_fiyat_label.setText("Ürün seçiniz.")
        else:
            Satis.query.filter_by(urun=curun.text()).delete()
            db.session.commit()

    def kisibilgi(self):
        try:
            if self.ui.ekran_label.text()=="" or self.ui.ekran_label.text().endswith("boş."):
                self.ui.ekran_label.setText("Lütfen dolu bir oda seçiniz.")
            else:
                self.pencerekisi = QMainWindow()
                self.kisi= Ui_KisiBilgi()
                self.kisi.setupUi2(self.pencerekisi)
                self.pencerekisi.show()
                self.pencerekisi.setWindowIcon(QIcon(":/icon/home_icon.png"))

                k=self.bilgicikar()

                self.kisi.bilgi_panel_textbrowser.setText(k)

        except:
            self.ui.ekran_label.setText("Lütfen bir oda seçiniz.")
    def bilgicikar(self):
        OB = eval(f"Oda{odano}.query.filter_by(odanumarasi=odano).first()")
        g = "Oda : " + str(OB.odanumarasi) + "\n\n" + "Giriş tarihi:    " + str(
            OB.gtarih) + "\n" + "Çıkış tarihi:    " + str(OB.ctarih) + "\n\n"
        masraf = OB.odamasraf
        borc = OB.thesap
        OB = eval(f"Oda{odano}.query.all()")
        for i in OB:
            g += str(i.kisi) + ". " + i.isimsoyisim + "\n" + "    " + "TC kimlik numarası:     " + str(
                i.tc) + "\n" + "    " + "Telefon numarası:     " + str(i.telefon) + "\n"
            g += "    " + "Cinsiyet:   " + i.cinsiyet + "\n" + "    " + "E-posta adresi:  " + i.mail + "\n"

        y=self.ui.ekran_label_2.text()

        g += " \n " + y + " \n\n       Toplam : " + str(borc)
        return g

    def odacikis(self):
        if self.ui.ekran_label.text().endswith("boş."):
            self.ui.ekran_label.setText("Bu oda Boş")
        elif self.ui.ekran_label.text() == "":
            self.ui.ekran_label.setText("Bir oda seçmediniz.")
        else:
            self.pencereemin = QMainWindow()
            self.eminpencere = Ui_MainWindow()
            self.eminpencere.setupUi(self.pencereemin)
            self.pencereemin.show()
            self.pencereemin.setWindowIcon(QIcon(":/icon/home_icon.png"))

            self.eminpencere.emin_evet_button.clicked.connect(self.emin)
            self.eminpencere.emin_hayir_button.clicked.connect(self.pencereemin.close)

    def emin(self):
        veri=eval(f"db.session.query(Oda{odano}).all()")
        for i in veri:
            x = ""
            if i.kisi == 1 :
                k = i.thesap
                x=self.bilgicikar()
                xxx = Gecmis(isimsoyisim=i.isimsoyisim, tc=i.tc, odanumarasi=i.odanumarasi, telefon=i.telefon, mail=i.mail,odamasraf=x, dtarih=i.dtarih,thesap=i.thesap,gtarih=i.gtarih,ctarih=i.ctarih,cinsiyet=i.cinsiyet,bitti=True)
                db.session.add(xxx)
                db.session.commit()

        n=Odafiyat.query.filter_by(odalar='Toplam').first()
        if n is None:
            ek=Odafiyat(odalar="Toplam",fiyat=k)
            db.session.add(ek)
            db.session.commit()
        else:
            kk = n.fiyat + k
            n.fiyat = kk
            db.session.commit()


        eval(f"db.session.query(Oda{odano}).delete()")
        db.session.commit()
        self.pencereemin.close()
        self.ui.ekran_label.setText("Oda boşaltıldı.")
        self.odalariTanimla(self.ui)

    def arama(self,text):
        wg = Satis.query.all()
        wgs = list()
        for i in wg:
            wgs.append(i.urun)
        harf = self.ui.arama_lineEdit.text().casefold()
        self.ui.urun_listesi_QlistWidget.clear()
        if harf == "":
            urunler = db.session.query(Satis).all()
            for i in urunler:
                self.ui.urun_listesi_QlistWidget.addItem(i.urun)
        else:
            for widget in wgs:
                wi= widget.casefold()
                if wi.count(harf) == 0:
                    pass
                else:
                    self.ui.urun_listesi_QlistWidget.addItem(widget)
            if self.ui.urun_listesi_QlistWidget.count() == 0:
                self.ui.urun_fiyat_label.setText("Böyle bir ürün yok.")
            else:
                self.ui.urun_fiyat_label.setText("")

    def gecmis(self):

        self.penceregecmis = QMainWindow()
        self.gec = Ui_Gecmis()
        self.gec.setupUi(self.penceregecmis)
        self.penceregecmis.show()
        self.penceregecmis.setWindowIcon(QIcon(":/icon/home_icon.png"))
        self.gec.gecmis_cikis_pushButton.clicked.connect(self.penceregecmis.close)
        self.gec.garama_pushButton.clicked.connect(self.gecmisarama)
        v=""
        veri = Gecmis.query.all()
        for i in veri:
            if i.odamasraf == "":
                pass
            else:
                v+="\n------------------------\n"+i.odamasraf+"\n------------------------\n"
        m=Odafiyat.query.filter_by(odalar="Toplam").first()
        k=Odafiyat.query.filter_by(odalar="kisi").first()
        self.gec.toplamgelir_lable.setText("Toplam Kazanç : {}".format(str(m.fiyat)))
        self.gec.toplamkisi_label.setText("Toplam kalan kişi : {}".format(str(k.fiyat)))
        self.gec.gecmis_bilgi_label.setText(v)
    def gecmisarama(self):
        isim=self.gec.isimara_lineEdit.text().strip().title()
        tcc=str(self.gec.tcara_lineEdit.text().strip())
        v = ""
        veri = Gecmis.query.all()
        if isim != "" and tcc == "":
            for i in veri:
                k=i.isimsoyisim.find(isim)
                if k != -1:
                    v += "\n------------------------\n" + i.odamasraf + "\n------------------------\n"
        elif tcc != "" and isim == "":
            for i in veri:
                k=i.tc.find(isim)
                if k != -1:
                    v += "\n------------------------\n" + i.odamasraf + "\n------------------------\n"
        elif tcc != "" and isim != "":
            for i in veri:
                k=i.isimsoyisim.find(isim)
                t=str(i.tc).find(tcc)
                if k != -1 and t != -1:
                    v += "\n------------------------\n" + i.odamasraf + "\n------------------------\n"
        else:
            for i in veri:
                if i.odamasraf == "":
                    pass
                else:
                    v+="\n------------------------\n"+i.odamasraf+"\n------------------------\n"

        self.gec.gecmis_bilgi_label.setText(v)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    Form = Motel()
    Form.showMinimized()
    sys.exit(app.exec_())
